-- MySQL Script generated by MySQL Workbench
-- Sun Apr 25 01:25:21 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema image_board
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Table `boards`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `boards` ;

CREATE TABLE IF NOT EXISTS `boards` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `uri` VARCHAR(5) NOT NULL,
  `name` TINYTEXT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uri_UNIQUE` (`uri` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `threads`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `threads` ;

CREATE TABLE IF NOT EXISTS `threads` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `board` INT NOT NULL,
  `sticky` TINYINT NOT NULL DEFAULT 0,
  `date_bumped` DATETIME NOT NULL DEFAULT now(),
  `title` VARCHAR(100) NULL DEFAULT '',
  PRIMARY KEY (`id`),
  INDEX `board_idx` (`board` ASC) VISIBLE,
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  CONSTRAINT `thread_board`
    FOREIGN KEY (`board`)
    REFERENCES `boards` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `thread_op`
    FOREIGN KEY (`id`)
    REFERENCES `posts` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posters`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `posters` ;

CREATE TABLE IF NOT EXISTS `posters` (
  `ip` VARBINARY(16) NOT NULL,
  PRIMARY KEY (`ip`),
  UNIQUE INDEX `ip_UNIQUE` (`ip` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `posts`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `posts` ;

CREATE TABLE IF NOT EXISTS `posts` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `comment` TEXT NOT NULL,
  `author` VARCHAR(45) NOT NULL DEFAULT 'Anonymous',
  `date_posted` DATETIME NOT NULL DEFAULT now(),
  `thread` INT NULL,
  `poster` VARBINARY(16) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `thread_idx` (`thread` ASC) VISIBLE,
  INDEX `poster_idx` (`poster` ASC) VISIBLE,
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  CONSTRAINT `post_thread`
    FOREIGN KEY (`thread`)
    REFERENCES `threads` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `poster`
    FOREIGN KEY (`poster`)
    REFERENCES `posters` (`ip`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `images`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `images` ;

CREATE TABLE IF NOT EXISTS `images` (
  `id` INT NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  CONSTRAINT `image_post`
    FOREIGN KEY (`id`)
    REFERENCES `posts` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bans`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bans` ;

CREATE TABLE IF NOT EXISTS `bans` (
  `poster` VARBINARY(16) NOT NULL,
  `start_date` DATE NOT NULL DEFAULT (CURRENT_DATE()),
  `end_date` DATE NOT NULL,
  `reason` VARCHAR(200) NULL,
  INDEX `poster_idx` (`poster` ASC) VISIBLE,
  CONSTRAINT `ban_ip`
    FOREIGN KEY (`poster`)
    REFERENCES `posters` (`ip`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- procedure new_thread
-- -----------------------------------------------------
DROP procedure IF EXISTS `new_thread`;

DELIMITER $$
CREATE PROCEDURE `new_thread` (board_id INT, new_title VARCHAR(100), new_comment TEXT, new_author VARCHAR(45), image_name VARCHAR(100), poster_ip VARBINARY(16))
BEGIN
	START TRANSACTION;
    INSERT IGNORE INTO `posters` (ip) VALUES (poster_ip);
    INSERT INTO `posts` (comment, author, poster) VALUES (new_comment, new_author, poster_ip);
    SET @post_id = LAST_INSERT_ID();
    CALL new_image(@post_id, image_name);
    INSERT INTO `threads` (id, board, title) VALUES (@post_id, board_id, new_title);
    UPDATE `posts` SET thread = LAST_INSERT_ID() WHERE id = @post_id;
    COMMIT;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure new_reply
-- -----------------------------------------------------
DROP procedure IF EXISTS `new_reply`;

DELIMITER $$
CREATE PROCEDURE `new_reply` (new_comment TEXT, new_author VARCHAR(45), thread_id INT, image_name VARCHAR(100), poster_ip VARBINARY(16))
BEGIN
	START TRANSACTION;
    INSERT IGNORE INTO `posters` (ip) VALUES (poster_ip);
    INSERT INTO `posts` (comment, author, thread, poster) VALUES (new_comment, new_author, thread_id, poster_ip);
    UPDATE `threads` SET date_bumped = (SELECT date_posted FROM `posts` WHERE id = LAST_INSERT_ID()) WHERE id = thread_id;
    IF image_name IS NOT NULL THEN
		CALL new_image(LAST_INSERT_ID(), image_name);
	END IF;
    COMMIT;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_board_threads
-- -----------------------------------------------------
DROP procedure IF EXISTS `get_board_threads`;

DELIMITER $$
CREATE PROCEDURE `get_board_threads` (board_id INT)
BEGIN
	SELECT * FROM threads WHERE board = board_id ORDER BY sticky DESC, date_bumped DESC;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_thread_op
-- -----------------------------------------------------
DROP procedure IF EXISTS `get_thread_op`;

DELIMITER $$
CREATE PROCEDURE `get_thread_op` (thread_id INT)
BEGIN
	SELECT * FROM posts WHERE thread = thread_id ORDER BY date_posted ASC LIMIT 1;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_thread_replies
-- -----------------------------------------------------
DROP procedure IF EXISTS `get_thread_replies`;

DELIMITER $$
CREATE PROCEDURE `get_thread_replies` (thread_id INT)
BEGIN
	SELECT * FROM posts WHERE thread = thread_id ORDER BY date_posted ASC LIMIT 1, 500;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure delete_thread
-- -----------------------------------------------------
DROP procedure IF EXISTS `delete_thread`;

DELIMITER $$
CREATE PROCEDURE `delete_thread` (thread_id int)
BEGIN
	START TRANSACTION;
    DELETE FROM `threads` WHERE id = thread_id;
    COMMIT;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure delete_post
-- -----------------------------------------------------
DROP procedure IF EXISTS `delete_post`;

DELIMITER $$
CREATE PROCEDURE `delete_post` (post_id int)
BEGIN
	START TRANSACTION;
    DELETE FROM `posts` WHERE id = post_id;
    COMMIT;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure new_image
-- -----------------------------------------------------
DROP procedure IF EXISTS `new_image`;

DELIMITER $$
CREATE PROCEDURE `new_image` (post_id INT, image_name VARCHAR(100))
BEGIN
	START TRANSACTION;
    INSERT INTO `images` (id, name) VALUES (post_id, image_name);
    SELECT post_id;
    COMMIT;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure new_ban
-- -----------------------------------------------------
DROP procedure IF EXISTS `new_ban`;

DELIMITER $$
CREATE PROCEDURE `new_ban` (ip VARBINARY(16), new_end DATE, new_reason VARCHAR(200))
BEGIN
	START TRANSACTION;
    INSERT INTO `bans` (poster, end_date, reason) VALUES (ip, new_end, new_reason);
    COMMIT;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_ban
-- -----------------------------------------------------
DROP procedure IF EXISTS `get_ban`;

DELIMITER $$
CREATE PROCEDURE `get_ban` (ip VARBINARY(16))
BEGIN
	SELECT * FROM bans WHERE poster = ip ORDER BY end_date DESC LIMIT 1;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_recent_post_date
-- -----------------------------------------------------
DROP procedure IF EXISTS `get_recent_post_date`;

DELIMITER $$
CREATE PROCEDURE `get_recent_post_date` (ip VARBINARY(16))
BEGIN
	SELECT date_posted FROM posts WHERE poster = ip ORDER BY date_posted DESC LIMIT 1;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_user_posts
-- -----------------------------------------------------
DROP procedure IF EXISTS `get_user_posts`;

DELIMITER $$
CREATE PROCEDURE `get_user_posts` (ip VARBINARY(16))
BEGIN
	SELECT * FROM posts WHERE poster = ip;
END;$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
